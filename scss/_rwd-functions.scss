@import "rwd-variables";
@import "strapless/base/scss/base";

// region //////////////////////////////////////////////// Breakpoint Functions

// Returns -breakpoint for adding into class selectors.
// For breakpoints with no minimum size, returns null.
@function breakpoint-infix($bp) {
  @if variable-exists(grid-breakpoints) == false {
    @error 'You must set the $grid-breakpoints map prior to the first usage of the `breakpoint-infix` function.';
  }
  @if map-has-key($grid-breakpoints, $bp) {
    $min: strip-unit(map-get($grid-breakpoints, $bp));
    @if $min > 0 {
      @return -#{$bp};
    }
  }

  @return null;
}

// Returns the max width for the given breakpoint.
@function breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints,$breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $grid-breakpoints map.";
}

// Returns the max container width for the given breakpoint.
@function container($breakpoint) {
  @if map-has-key($container-max-widths,$breakpoint) {
    @return map-get($container-max-widths, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $container-max-widths map.";
}

// Sets the width for a given breakpoint to the given value
// This is a mixin, as SASS functions should not have consequences.
@mixin set-breakpoint($breakpoint,$value) {
  @if not(variable-exists(grid-breakpoints)) {
    @error "You may not use the `set-breakpoint` mixin without the $grid-breakpoints map.  Please include `root-variables` prior to this usage."
  } @else {
    $grid-breakpoints: set-map-key($grid-breakpoints, $breakpoint, $value) !global;
  }
}

// Sets the container max width for the given breakpoint to
// the given value.  This is a mixin, as SASS functions should
// not have consequences.
@mixin set-max-width($breakpoint,$value) {
  @if not(variable-exists(container-max-widths)) {
    @error "You may not use the `set-max-width` mixin without the $container-max-widths map.  Please include `root-variables` prior to this usage."
  } @else {
    $container-max-widths: set-map-key($container-max-widths, $breakpoint, $value) !global;
  }
}

// endregion ///////////////////////////////////////////// End Breakpoint Functions

// region //////////////////////////////////////////////// Media Expression Functions

// Gets the operator prefixing a value in an expression.
// @author Hugo Giraudel
@function get-expression-operator($expression) {
  @each $operator in ('>=', '<=', '>', '<', '≥', '≤', '=') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  @return '';
}

// Gets the value of an expression given the prefixing operator.
// @author Hugo Giraudel
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));
  @return $value;
}

// Returns the proper condition string to use in a CSS media
// query for the given minimum and maximum width.
@function get-width-string($operator, $min: 0, $max: 0) {
  @if $operator == '≥' {  $operator: '>='; }
  @if $operator == '≤' {  $operator: '<='; }
  @if $operator == '=' {
    @if $max > 0 {
      @return ' (min-width: ' + $min + ') and (max-width: ' + $max + ')';
    } @else {
      @return ' (min-width: ' + $min + ')';
    }
  } @else if $operator == '<' {
    @return ' (max-width: ' + ($min - 1) + ')';
  } @else if $operator == '>' {
    @return ' (min-width: ' + ($max + 1) + ')';
  } @else if $operator == '<=' {
    @return ' (max-width: ' + $max + ')';
  } @else if $operator == '>=' {
    @return ' (min-width: ' + $min + ')';
  }

  @return '';
}

// Returns the proper condition string to use in a CSS media
// query for the given breakpoint.  The $grid-breakpoints
// variable must be accessible for this function.
@function get-breakpoint-string($viewport,$operator) {
  @each $class, $min in $grid-breakpoints {
    @if($class == $viewport) {
      $max: map-get-next($grid-breakpoints,$class, 0);
      @return get-width-string($operator,$min,$max);
    }
  }

  @return '';
}

// Determines if the string given is a CSS media type.
@function is-media-type($string) {
  @if type-of($string) == string {
    $types: (all, print, screen, speech, tty, tv, projection, handheld, braille, embossed, aural);
    @for $i from 1 through length($types) {
      $type: nth($types,$i);
      @if $string == $type {
        @return true;
      }
    }
  }

  @return false;
}

// endregion ///////////////////////////////////////////// End Media Expression Functions

// region //////////////////////////////////////////////// Selector/Media Targeting Functions

// Returns media query for the given conditions.
@function media-condition($conditions...) {
  $compiled-list: ();
  @for $i from 1 through length($conditions) {
    $condition: unquote(quote(nth($conditions,$i)));
    // Basic String Conditions
    @if map-has-key($condition-map, $condition) {
      $pre: map-get($condition-map,$condition);
      @if(type-of($pre) == list) {
       @for $ii from 1 through length($pre) {
         $part: unquote(quote(nth($pre,$ii)));
         $compiled-list: append( $compiled-list, $part, comma );
       }
      } @else {
        $compiled-list: append( $compiled-list, map-get( $condition-map,$condition ), comma );
      }
    } @else {
      $operator: get-expression-operator($condition);
      $value: get-expression-value($condition,$operator);
      @if map-has-key($grid-breakpoints, $value) {
        // Breakpoint Based Conditions
        $compiled-list: append($compiled-list, get-breakpoint-string($value, $operator), comma);
      } @else {
        // Width Based Condition
        $compiled-list: append($compiled-list, get-width-string($operator,$value,$value), comma );
      }
    }
  }

  $conditions-string: '';
  @for $i from 1 through length($compiled-list) {
    $this: nth($compiled-list, $i);
    $last: if($i > 1, nth($compiled-list, $i - 1), null);
    $sep: '';

    @if $conditions-string != '' {
      $sep: unquote(", ");
    }

    $conditions-string: $conditions-string + $sep + $this;
  }

  @return $conditions-string;
}

// Returns selector for targeting a specific browser based on a user
// agent placed in the HTML tag by xq-detect.  As user agents can easily
// be spoofed, this should only be used for minimal 'hacks'.
@function _browser-target($browser, $version: null, $negate: false) {
  $sep: '';
  @if map-has-key($target-user-agent,$browser) {
    $ua:     unquote(map-get($target-user-agent, $browser));
    $sep:    if($version,'/','');
    $ua-sel: unquote('[data-user-agent="#{$ua}#{$sep}#{$version}"]');

    @return if($negate,unquote(":not(#{$ua-sel})"),$ua-sel);
  }

  @return null;
}

// Returns selector targeting a specific feature that cannot
// be targeted with media queries.  Requires usage of xq-detect
// in the head of the document.  Also works with Modernizr.
@function _feature-target($feature, $negate: false) {
  @if map-has-key($target-feature, $feature) {
    $sel: unquote(map-get($target-feature, $feature));

    @return if($negate, unquote(":not(#{$sel})"), $sel);
  }

  @return null;
}

// Returns selector for given targets
@function _target($targets...) {
  $class: '';
  $ua: '';
  @for $i from 1 through length($targets) {
    $list: _str-explode(nth($targets,$i)," ");
    $negate: if(nth($list,1) == unquote("not"), true, false);
    $criteria: if($negate, nth($list,2), nth($list,1));

    @if(map-has-key($target-user-agent,$criteria)) {
      $browser: $criteria;
      $v-index: if($negate, 3, 2);
      $version: if(length($list) >= $v-index, nth($list,$v-index), null);
      $ua:      $ua + _browser-target( $criteria, $version, $negate );
    } @else {
      $class: $class + _feature-target( $criteria, $negate );
    }
  }

  @return unquote('html#{$class}#{$ua}');
}


// endregion ///////////////////////////////////////////// End Selector/Media Targeting Functions