@import "rwd-variables";
@import "rwd-functions";

// Inserts a psuedo-element used to detect the current breakpoint.
@mixin responsive-breakpoint($breakpoint) {
  body::before { content: "#{$breakpoint}"; display: none !important; }
}

// Wraps the given content in the appropriate media
// query for the given conditions.  If no media type
// is included in the conditions, the 'all' media type
// is used.
@mixin media($conditions...) {
  @media #{media-condition($conditions...)} {
    @content;
  }
}

// Encloses the content in a media query intended for devices reporting 'pointer:coarse'.
// Works with poly-pointer polyfill.
//
// Any additional media queries given will be appended to each of the necessary queries.
//
// @param  {List|String} $and - Additional media queries to add.
@mixin only-touch($and: null) {

  $joiner: unquote(" and ");
  $suffix: "";

  @if $and != null {
    @if type-of($and) == "list" {
      @each $item in $and {
        // Get Surrounded by Parenthesis if Needed
        $tItem: parenthesis($item, true);
        // Add The ' and '
        $suffix: #{$suffix}#{$joiner}#{$tItem};
      }
    } @else {
      $suffix: #{$joiner}#{parenthesis($and,true)};
    }
  }

  // Get the Touch Conditions from Conditions Map
  $touch-conditions: ();
  @if(map-has-key($condition-map,"touch")) {
    $touch-conditions: map-get($condition-map,"touch");
  } @else {
    @error "You must have a 'touch' key in your $conditions-map.";
  }

  // Put it all together, separated by ,'s. This could be done inline in the output, but that generates
  // inspection errors in many SASS inspectors, so avoiding it here.
  $query: "";
  $sep: unquote(", ");
  @each $part in $touch-conditions {
    $tPart: unquote(quote($part));
    $query: if(str-length($query) > 0, #{$query}#{$sep}#{$part}#{$suffix}, #{$part}#{$suffix});
  }

  // Output
  @media #{$query} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that
// targets only browsers without CSS Media Query 4 capabilities.
// Requires xq-detect's JS in the head of the document.
@mixin only-fallback() {
  #{_target("fallback")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only browser without CSS (standard) flexbox capabilities.
// NOTE:  This mixin will not include IE10!
//
// Requires xq-detect's JS in the head of the document.
@mixin only-baseline() {
  #{_target("baseline")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Safari browsers.
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-safari() {
  #{_target("safari")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Safari 10 browsers.
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-safari-10() {
  #{_target("safari")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Microsoft Edge
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-edge() {
  #{_target("edge")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Internet Explorer browsers.
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-ie() {
  #{_target("ie")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Internet Explorer 10.
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-ie-10() {
  #{_target("ie 10")} {
    @content;
  }
}

// Wraps the given content in a parent CSS selector that targets
// only Internet Explorer 11.
//
// IMPORTANT:  This uses the user agent, and should only be used
//             for minimal hacks that tweak appearance.
//
// NOTE:       Requires xq-detect's JS in the head of the document.
@mixin only-ie-11() {
  #{_target("ie 11")} {
    @content;
  }
}

@mixin only-android() {
  #{_target("android")} {
    @content;
  }
}

@mixin only-ios() {
  #{_target("ios")} {
    @content;
  }
}

@mixin only-mac() {
  #{_target("mac")} {
    @content;
  }
}

@mixin only-windows() {
  #{_target("windows")} {
    @content;
  }
}